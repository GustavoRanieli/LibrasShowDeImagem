!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@tensorflow/tfjs-core"),require("@tensorflow/tfjs-core/dist/ops/ops_for_converter")):"function"==typeof define&&define.amd?define(["exports","@tensorflow/tfjs-core","@tensorflow/tfjs-core/dist/ops/ops_for_converter"],t):t((e=e||self).tf=e.tf||{},e.tf,e.tf)}(this,function(e,W,x){"use strict";var t,a,T=function(){return(T=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function y(e,o,p,i){return new(p=p||Promise)(function(a,t){function n(e){try{s(i.next(e))}catch(e){t(e)}}function r(e){try{s(i.throw(e))}catch(e){t(e)}}function s(e){var t;e.done?a(e.value):((t=e.value)instanceof p?t:new p(function(e){e(t)})).then(n,r)}s((i=i.apply(e,o||[])).next())})}function U(n,r){var s,o,p,i={label:0,sent:function(){if(1&p[0])throw p[1];return p[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(a){return function(e){var t=[a,e];if(s)throw new TypeError("Generator is already executing.");for(;i;)try{if(s=1,o&&(p=2&t[0]?o.return:t[0]?o.throw||((p=o.return)&&p.call(o),0):o.next)&&!(p=p.call(o,t[1])).done)return p;switch(o=0,(t=p?[2&t[0],p.value]:t)[0]){case 0:case 1:p=t;break;case 4:return i.label++,{value:t[1],done:!1};case 5:i.label++,o=t[1],t=[0];continue;case 7:t=i.ops.pop(),i.trys.pop();continue;default:if(!(p=0<(p=i.trys).length&&p[p.length-1])&&(6===t[0]||2===t[0])){i=0;continue}if(3===t[0]&&(!p||t[1]>p[0]&&t[1]<p[3]))i.label=t[1];else if(6===t[0]&&i.label<p[1])i.label=p[1],p=t;else{if(!(p&&i.label<p[2])){p[2]&&i.ops.pop(),i.trys.pop();continue}i.label=p[2],i.ops.push(t)}}t=r.call(n,i)}catch(e){t=[6,e],o=0}finally{s=p=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}}}function v(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),o=[];try{for(;(void 0===t||0<t--)&&!(n=s.next()).done;)o.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return o}function Q(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(v(arguments[t]));return e}(a=t=t||{})[a.DT_INVALID=0]="DT_INVALID",a[a.DT_FLOAT=1]="DT_FLOAT",a[a.DT_DOUBLE=2]="DT_DOUBLE",a[a.DT_INT32=3]="DT_INT32",a[a.DT_UINT8=4]="DT_UINT8",a[a.DT_INT16=5]="DT_INT16",a[a.DT_INT8=6]="DT_INT8",a[a.DT_STRING=7]="DT_STRING",a[a.DT_COMPLEX64=8]="DT_COMPLEX64",a[a.DT_INT64=9]="DT_INT64",a[a.DT_BOOL=10]="DT_BOOL",a[a.DT_QINT8=11]="DT_QINT8",a[a.DT_QUINT8=12]="DT_QUINT8",a[a.DT_QINT32=13]="DT_QINT32",a[a.DT_BFLOAT16=14]="DT_BFLOAT16",a[a.DT_FLOAT_REF=101]="DT_FLOAT_REF",a[a.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",a[a.DT_INT32_REF=103]="DT_INT32_REF",a[a.DT_UINT8_REF=104]="DT_UINT8_REF",a[a.DT_INT16_REF=105]="DT_INT16_REF",a[a.DT_INT8_REF=106]="DT_INT8_REF",a[a.DT_STRING_REF=107]="DT_STRING_REF",a[a.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",a[a.DT_INT64_REF=109]="DT_INT64_REF",a[a.DT_BOOL_REF=110]="DT_BOOL_REF",a[a.DT_QINT8_REF=111]="DT_QINT8_REF",a[a.DT_QUINT8_REF=112]="DT_QUINT8_REF",a[a.DT_QINT32_REF=113]="DT_QINT32_REF",a[a.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",(a=(a={}).CheckpointFormatVersion||(a.CheckpointFormatVersion={}))[a.LEGACY=0]="LEGACY",a[a.V1=1]="V1",a[a.V2=2]="V2";var n={};function A(e){return n[e]}function K(e,t,a,n,r){var s,o,p=t.inputParams[e];return p&&void 0!==p.inputIndexStart?(o=p.inputIndexStart,s=0===p.inputIndexEnd?void 0:void 0===p.inputIndexEnd?o+1:p.inputIndexEnd,"tensor"===p.type?X(t.inputNames[p.inputIndexStart],a,n,r):"tensors"===p.type?t.inputNames.slice(o,s).map(function(e){return X(e,a,n,r)}):(o=(s=X(t.inputNames.slice(o)[0],a,n,r)).dataSync(),"number"===p.type?o[0]:W.util.toNestedArray(s.shape,o))):(p=t.attrParams[e])&&p.value}function X(e,t,a,n){var e=v(S(e),2),r=e[0],e=e[1];if(null!=n){n=n.getHashTableHandleByName(r);if(null!=n)return n}n=a.currentContextIds.find(function(e){return!!t[p(r,e)]});return void 0!==n?t[p(r,n)][e]:void 0}function h(e,t){var e=v(S(e),3),a=e[0],n=e[1],e=e[2];return[p(a,t&&t.currentContextId),n,e]}function p(e,t){return t?e+"-"+t:e}function S(e){var t,a=e.split(":");return 1===a.length?[e,0,void 0]:(e=a[0],t=3===a.length?a[1]:void 0,[e,Number(a[a.length-1]),t])}function l(e,t,a){if("explicit"!==(n=K("pad",e,t,a)))return n;for(var n=K("explicitPaddings",e,t,a),r=[[0,0],[0,0],[0,0],[0,0]],s=0;s<4;s++)r[s][0]=n[2*s],r[s][1]=n[2*s+1];return r}function Z(e){return e.kept?e:W.clone(e)}var I={__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},k={__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},D={__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]},M={__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},V={__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},z={__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},L={__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},C={__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},F={__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]},P={__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},j={__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},R={__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]},B={__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},q={__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},H={__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},G={__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]},$={__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},ee={__proto__:null,json:[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]},te={__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]},ae=(Object.defineProperty(r,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),r.prototype.transformGraph=function(e,t){var a=this,n=(void 0===t&&(t={}),e.node),r=[],s=[],o=[],p=n.reduce(function(e,t){return e[t.name]=a.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||o.push(e[t.name]),e},{}),i=[],u=[],m={},d={},n=(null!=t&&(m=this.mapSignatureEntries(t.inputs),d=this.mapSignatureEntries(t.outputs)),Object.keys(p)),n=(n.forEach(function(e){var r=p[e];r.inputNames.forEach(function(e,t){var e=v(h(e),3),a=e[0],e=e[2],n=p[a];null!=n.outputs&&-1!==(e=n.outputs.indexOf(e))&&(r.inputNames[t]=a+":"+e),r.inputs.push(n),n.children.push(r)})}),0===Object.keys(d).length?n.forEach(function(e){e=p[e];0===e.children.length&&u.push(e)}):Object.keys(d).forEach(function(e){var t=v(h(e),1)[0],t=p[t];null!=t&&(t.signatureKey=d[e],u.push(t))}),0<Object.keys(m).length?Object.keys(m).forEach(function(e){var t=v(h(e),1)[0],t=p[t];t&&(t.signatureKey=m[e],i.push(t))}):i=r,{}),e=(null!=e.library&&null!=e.library.function&&(n=e.library.function.reduce(function(e,t){return e[t.signature.name]=a.mapFunction(t),e},{})),{nodes:p,inputs:i,outputs:u,weights:s,placeholders:r,signature:t,functions:n});return 0<o.length&&(e.initNodes=o),e},r.prototype.mapSignatureEntries=function(a){return Object.keys(a||{}).reduce(function(e,t){return e[a[t].name]=t,e},{})},r.prototype.mapNode=function(r){var e=A(r.op)||this.opMappers[r.op]||{},t=(null==r.attr&&(r.attr={}),{name:r.name,op:r.op,category:e.category,inputNames:(r.input||[]).map(function(e){return e.startsWith("^")?e.substr(1):e}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:r.attr,outputs:e.outputs});return null!=e.inputs&&(t.inputParams=e.inputs.reduce(function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e},{})),null!=e.attrs&&(t.attrParams=e.attrs.reduce(function(e,t){var a=t.type,n=void 0;switch(t.type){case"string":void 0===(n=s(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=s(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"string[]":void 0===(n=pe(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=pe(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"number":void 0===(n=i(r.attr,t.tfName,t.defaultValue||0))&&t.tfDeprecatedName&&(n=i(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"number[]":void 0===(n=oe(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=oe(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"bool":void 0===(n=o(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=o(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"bool[]":void 0===(n=ue(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=ue(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"shape":void 0===(n=c(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=c(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"shape[]":void 0===(n=ie(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=ie(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"dtype":void 0===(n=m(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=m(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"dtype[]":void 0===(n=d(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=d(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"func":void 0===(n=re(r.attr,t.tfName,t.defaultValue))&&t.tfDeprecatedName&&(n=re(r.attr,t.tfDeprecatedName,t.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: "+t.type+" for op: "+r.op)}return e[t.name]={value:n,type:a},e},{})),t},r.prototype.mapFunction=function(e){var a=this,t=e.nodeDef,n=[],s={},r=(null!=t&&(s=t.reduce(function(e,t){return e[t.name]=a.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e},{})),[]),o=[];e.signature.inputArg.forEach(function(e){var t=v(h(e.name),1)[0],a={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:u(e.type),type:"dtype"}},children:[]};a.signatureKey=e.name,r.push(a),s[t]=a});Object.keys(s).forEach(function(e){var r=s[e];r.inputNames.forEach(function(e,t){var e=v(h(e),3),a=e[0],e=e[2],n=s[a];null!=n.outputs&&-1!==(e=n.outputs.indexOf(e))&&(r.inputNames[t]=a+":"+e),r.inputs.push(n),n.children.push(r)})});var p=e.ret,t=(e.signature.outputArg.forEach(function(e){var e=v(h(p[e.name]),2),t=e[0],e=e[1],t=s[t];null!=t&&(t.defaultOutput=e,o.push(t))}),this.mapArgsToSignature(e));return{nodes:s,inputs:r,outputs:o,weights:n,placeholders:[],signature:t}},r.prototype.mapArgsToSignature=function(a){var n=this;return{methodName:a.signature.name,inputs:a.signature.inputArg.reduce(function(e,t){return e[t.name]=n.mapArgToTensorInfo(t),e},{}),outputs:a.signature.outputArg.reduce(function(e,t){return e[t.name]=n.mapArgToTensorInfo(t,a.ret),e},{})}},r.prototype.mapArgToTensorInfo=function(e,t){var a=e.name;return{name:a=null!=t?t[a]:a,dtype:e.type}},r);function r(){var e=[I,k,D,M,V,z,L,C,F,P,j,R,B,q,H,G,$,ee,te],e=[].concat.apply([],Q(e.map(function(e){return e.json})));this.opMappers=e.reduce(function(e,t){return e[t.tfOpName]=t,e},{})}function ne(e,t){e=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){var t=W.env().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?e:e.toLowerCase()}function s(e,t,a,n){void 0===n&&(n=!1);e=e[t];return null!=e?ne(e.s,n):a}function o(e,t,a){e=e[t];return e?e.b:a}function i(e,t,a){e=e[t]||{},t=null!=e.i?e.i:null!=e.f?e.f:a;return"number"==typeof t?t:parseInt(t,10)}function u(e){switch(e="string"==typeof e?t[e]:e){case t.DT_FLOAT:return"float32";case t.DT_INT32:case t.DT_INT64:case t.DT_INT8:case t.DT_UINT8:return"int32";case t.DT_BOOL:return"bool";case t.DT_DOUBLE:return"float32";case t.DT_STRING:return"string";default:return null}}function re(e,t,a){e=e[t];return e&&e.func?e.func.name:a}function m(e,t,a){e=e[t];return e&&e.type?u(e.type):a}function d(e,t,a){e=e[t];return e&&e.list&&e.list.type?e.list.type.map(u):a}function se(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(function(e){return"number"==typeof e.size?e.size:parseInt(e.size,10)}):[]}function c(e,t,a){e=e[t];return e&&e.shape?se(e.shape):a}function oe(e,t,a){e=e[t];return e?((e.list.f&&e.list.f.length?e.list.f:e.list.i)||[]).map(function(e){return"number"==typeof e?e:parseInt(e,10)}):a}function pe(e,t,a,n){void 0===n&&(n=!1);e=e[t];return e&&e.list&&e.list.s?e.list.s.map(function(e){return ne(e,n)}):a}function ie(e,t,a){e=e[t];return e&&e.list&&e.list.shape?e.list.shape.map(se):a}function ue(e,t,a){e=e[t];return e&&e.list&&e.list.b?e.list.b:a}de.prototype.getInput=function(e){return X(e,this.tensorMap,this.context)},de.prototype.getAttr=function(e,t){var a=this.node.rawAttrs[e];if(null!=a.tensor)return X(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return i(this.node.rawAttrs,e,t);if(null!=a.s)return s(this.node.rawAttrs,e,t);if(null!=a.b)return o(this.node.rawAttrs,e,t);if(null!=a.shape)return c(this.node.rawAttrs,e,t);if(null!=a.type)return m(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return oe(this.node.rawAttrs,e,t);if(null!=a.list.s)return pe(this.node.rawAttrs,e,t);if(null!=a.list.shape)return ie(this.node.rawAttrs,e,t);if(null!=a.list.b)return ue(this.node.rawAttrs,e,t);if(null!=a.list.type)return d(this.node.rawAttrs,e,t)}return t};var me=de;function de(e,t,a){var n=this;this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(function(e){return n.getInput(e)}),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(function(e,t){return e[t]=n.getAttr(t),e},{}))}function Y(e,t,a){if(void 0===a&&(a=""),"number"!=typeof e&&"number"!=typeof t){W.util.assert(e.length===t.length,function(){return a+" Shapes "+e+" and "+t+" must match"});for(var n=0;n<e.length;n++){var r=e[n],s=t[n];W.util.assert(r<0||s<0||r===s,function(){return a+" Shapes "+e+" and "+t+" must match"})}}}function ce(e){return"number"!=typeof e&&!e.some(function(e){return e<0})}function f(e,t,a){var n=ye(e,a),e=!ce(n);if(e&&0===t.length)throw new Error("Tried to calculate elements of an empty list with non-fully-defined elementShape: "+n);if(e&&t.forEach(function(e){n=ye(e.shape,n)}),ce(n))return n;throw new Error("Non-fully-defined elementShape: "+n)}function ye(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error("Incompatible ranks during merge: "+e+" vs. "+t);for(var a=[],n=0;n<e.length;++n){var r=e[n],s=t[n];if(0<=r&&0<=s&&r!==s)throw new Error("Incompatible shape during merge: "+e+" vs. "+t);a[n]=0<=r?r:s}return a}Object.defineProperty(g.prototype,"id",{get:function(){return this.idTensor.id},enumerable:!0,configurable:!0}),Object.defineProperty(g.prototype,"closed",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),g.prototype.clearAndClose=function(t){this.tensors.forEach(function(e){null!=t&&t.has(e.tensor.id)||e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()},g.prototype.size=function(){return this.tensors.length},g.prototype.read=function(e){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(e<0||e>=this.size())throw new Error("Tried to read from index "+e+", but array size is: "+this.size());var t=this.tensors[e];if(t.cleared)throw new Error("TensorArray "+this.name+": Could not read index "+e+" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor},g.prototype.readMany=function(e){var t=this;return e.map(function(e){return t.read(e)})},g.prototype.write=function(e,t){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error("Tried to write to index "+e+", but array is not resizeable and size is: "+this.maxSize);var a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+",\n          because the value dtype is "+t.dtype+", but TensorArray dtype is "+this.dtype+".");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Y(this.elementShape,t.shape,"TensorArray "+this.name+": Could not write to TensorArray index "+e+"."),a.read)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+", because it has already been read.");if(a.written)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+", because it has already been written.");a.tensor=t,W.keep(t),a.written=!0,this.tensors[e]=a},g.prototype.writeMany=function(e,a){var n=this;if(e.length!==a.length)throw new Error("TensorArray "+this.name+": could not write multiple tensors,because the index size: "+e.length+" is not the same as tensors size: "+a.length+".");e.forEach(function(e,t){return n.write(e,a[t])})},g.prototype.gather=function(e,t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but gather requested dtype "+t);if(e)e=e.slice(0,this.size());else{e=[];for(var a=0;a<this.size();a++)e.push(a)}return 0===e.length?W.tensor([],[0].concat(this.elementShape)):(t=this.readMany(e),Y(this.elementShape,t[0].shape,"TensorArray shape mismatch: "),W.stack(t,0))},g.prototype.concat=function(e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but concat requested dtype "+e);if(0===this.size())return W.tensor([],[0].concat(this.elementShape));for(var t=[],a=0;a<this.size();a++)t.push(a);e=this.readMany(t);return Y(this.elementShape,e[0].shape,"TensorArray shape mismatch: tensor array shape ("+this.elementShape+") vs first tensor shape ("+e[0].shape+")"),W.concat(e,0)},g.prototype.scatter=function(e,t){if(t.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+t.dtype);if(e.length!==t.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+e.length+" vs. "+t.shape[0]);var a=Math.max.apply(Math,Q(e));if(!this.dynamicSize&&a>=this.maxSize)throw new Error("Max index must be < array size ("+a+"  vs. "+this.maxSize+")");this.writeMany(e,W.unstack(t,0))},g.prototype.split=function(n,r){var s=this;if(r.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+r.dtype);var o=0,p=n.map(function(e){return o+=e});if(o!==r.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+o+", and tensor's shape is: "+r.shape);if(!this.dynamicSize&&n.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths ("+this.maxSize+" vs. "+n.length+"), and the TensorArray is not marked as dynamically resizeable");for(var i=0===o?0:r.size/o,u=[],e=(W.tidy(function(){r=W.reshape(r,[1,o,i]);for(var e=0;e<n.length;++e){var t=0===e?0:p[e-1],a=[1,n[e],i];u[e]=W.reshape(W.slice(r,[0,t,0],a),s.elementShape)}return u}),[]),t=0;t<n.length;t++)e[t]=t;this.writeMany(e,u)};var le=g;function g(e,t,a,n,r,s,o){this.name=e,this.dtype=t,this.maxSize=a,this.elementShape=n,this.identicalElementShapes=r,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=W.scalar(0),W.keep(this.idTensor)}Object.defineProperty(N.prototype,"id",{get:function(){return this.idTensor.id},enumerable:!0,configurable:!0}),N.prototype.copy=function(){return new N(Q(this.tensors),this.elementShape,this.elementDtype)},N.prototype.clearAndClose=function(t){this.tensors.forEach(function(e){null!=t&&t.has(e.id)||e.dispose()}),this.tensors.length=0,this.idTensor.dispose()},N.prototype.size=function(){return this.tensors.length},N.prototype.stack=function(e,t,a){var n=this;if(void 0===a&&(a=-1),t!==this.elementDtype)throw new Error("Invalid data types; op elements "+t+", but list elements "+this.elementDtype);if(-1!==a&&this.tensors.length!==a)throw new Error("Operation expected a list with "+a+" elements but got a list with "+this.tensors.length+" elements.");Y(e,this.elementShape,"TensorList shape mismatch: ");var r=f(this.elementShape,this.tensors,e);return W.tidy(function(){var e=n.tensors.map(function(e){return W.reshape(e,r)});return W.stack(e,0)})},N.prototype.popBack=function(e,t){if(t!==this.elementDtype)throw new Error("Invalid data types; op elements "+t+", but list elements "+this.elementDtype);if(0===this.size())throw new Error("Trying to pop from an empty list.");var t=f(this.elementShape,this.tensors,e),a=this.tensors.pop();return Y(a.shape,e,"TensorList shape mismatch: "),W.reshape(a,t)},N.prototype.pushBack=function(e){if(e.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements "+e.dtype+", but list elements "+this.elementDtype);if(Y(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");W.keep(e),this.tensors.push(e)},N.prototype.resize=function(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error("TensorListResize input size "+e+" is greater maxNumElement "+this.maxNumElements+".");this.tensors.length=e},N.prototype.getItem=function(e,t,a){if(a!==this.elementDtype)throw new Error("Invalid data types; op elements "+a+", but list elements "+this.elementDtype);if(e<0||e>this.tensors.length)throw new Error("Trying to access element "+e+" in a list with "+this.tensors.length+" elements.");if(null==this.tensors[e])throw new Error("element at index "+e+" is null.");Y(this.tensors[e].shape,t,"TensorList shape mismatch: ");a=f(this.elementShape,this.tensors,t);return W.reshape(this.tensors[e],a)},N.prototype.setItem=function(e,t){if(t.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements "+t.dtype+", but list elements "+this.elementDtype);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error("Trying to set element "+e+" in a list with max "+this.maxNumElements+" elements.");Y(this.elementShape,t.shape,"TensorList shape mismatch: "),W.keep(t),this.tensors[e]=t},N.prototype.gather=function(t,e,a){var n=this;if(e!==this.elementDtype)throw new Error("Invalid data types; op elements "+e+", but list elements "+this.elementDtype);Y(this.elementShape,a,"TensorList shape mismatch: "),t=t.slice(0,this.size());var r=f(this.elementShape,this.tensors,a);return 0===t.length?W.tensor([],[0].concat(r)):W.tidy(function(){var e=t.map(function(e){return W.reshape(n.tensors[e],r)});return W.stack(e,0)})},N.prototype.concat=function(e,t){var a=this;if(e&&e!==this.elementDtype)throw new Error("TensorList dtype is "+this.elementDtype+" but concat requested dtype "+e);Y(this.elementShape,t,"TensorList shape mismatch: ");var n=f(this.elementShape,this.tensors,t);return 0===this.size()?W.tensor([],[0].concat(n)):W.tidy(function(){var e=a.tensors.map(function(e){return W.reshape(e,n)});return W.concat(e,0)})};var J=N;function N(e,t,a,n){void 0===n&&(n=-1),this.tensors=e,this.elementShape=t,this.elementDtype=a,null!=e&&e.forEach(function(e){if(a!==e.dtype)throw new Error("Invalid data types; op elements "+a+", but list elements "+e.dtype);Y(t,e.shape,"TensorList shape mismatch: "),W.keep(e)}),this.idTensor=W.scalar(0),this.maxNumElements=n,W.keep(this.idTensor)}function fe(q,H,G){return y(he,void 0,void 0,function(){var F,P,j,r,t,a,s,o,p,R,n,i,u,m,d,c,y,l,f,h,g,N,b,x,T,v,S,_,O,w,B,E,A,I,k,D,M,V,z,L,C;return U(this,function(e){switch(e.label){case 0:switch(q.op){case"If":case"StatelessIf":return[3,1];case"While":case"StatelessWhile":return[3,3];case"LoopCond":return[3,9];case"Switch":return[3,10];case"Merge":return[3,12];case"Enter":return[3,13];case"Exit":return[3,14];case"NextIteration":return[3,15];case"TensorArrayV3":return[3,16];case"TensorArrayWriteV3":return[3,17];case"TensorArrayReadV3":return[3,18];case"TensorArrayGatherV3":return[3,19];case"TensorArrayScatterV3":return[3,20];case"TensorArrayConcatV3":return[3,21];case"TensorArraySplitV3":return[3,22];case"TensorArraySizeV3":return[3,23];case"TensorArrayCloseV3":return[3,24];case"TensorListSetItem":return[3,25];case"TensorListGetItem":return[3,26];case"TensorListScatterV2":case"TensorListScatter":return[3,27];case"TensorListReserve":case"EmptyTensorList":return[3,28];case"TensorListGather":return[3,29];case"TensorListStack":return[3,30];case"TensorListFromTensor":return[3,31];case"TensorListConcat":return[3,32];case"TensorListPushBack":return[3,33];case"TensorListPopBack":return[3,34];case"TensorListSplit":return[3,35]}return[3,36];case 1:return F=K("thenBranch",q,H,G),P=K("elseBranch",q,H,G),i=K("cond",q,H,G),t=K("args",q,H,G),[4,i.data()];case 2:return(o=e.sent())[0]?[2,G.functionMap[F].executeFunctionAsync(t,G.tensorArrayMap,G.tensorListMap)]:[2,G.functionMap[P].executeFunctionAsync(t,G.tensorArrayMap,G.tensorListMap)];case 3:return j=K("body",q,H,G),r=K("cond",q,H,G),t=K("args",q,H,G),[4,G.functionMap[r].executeFunctionAsync(t,G.tensorArrayMap,G.tensorListMap)];case 4:return a=e.sent(),s=t.map(function(e){return e.id}),[4,a[0].data()];case 5:o=e.sent(),a.forEach(function(e){e.kept||-1!==s.indexOf(e.id)||e.dispose()}),p=t,R=function(){var t,a,n;return U(this,function(e){switch(e.label){case 0:return t=p,[4,G.functionMap[j].executeFunctionAsync(p,G.tensorArrayMap,G.tensorListMap)];case 1:return p=e.sent(),a=p.map(function(e){return e.id}),t.forEach(function(e){e.kept||-1!==s.indexOf(e.id)||-1!==a.indexOf(e.id)||e.dispose()}),[4,G.functionMap[r].executeFunctionAsync(p,G.tensorArrayMap,G.tensorListMap)];case 2:return[4,(n=e.sent())[0].data()];case 3:return o=e.sent(),n.forEach(function(e){e.kept||-1!==s.indexOf(e.id)||-1!==a.indexOf(e.id)||e.dispose()}),[2]}})},e.label=6;case 6:return o[0]?[5,R()]:[3,8];case 7:return e.sent(),[3,6];case 8:return[2,p];case 9:return[2,[Z(n=K("pred",q,H,G))]];case 10:return n=K("pred",q,H,G),(u=K("data",q,H,G)).kept||(u=Z(u)),[4,n.data()];case 11:return[2,e.sent()[0]?[void 0,u]:[u,void 0]];case 12:return(i=q.inputNames.find(function(e){return void 0!==X(e,H,G)}))?[2,[Z(u=X(i,H,G))]]:[2,void 0];case 13:return m=K("frameName",q,H,G),u=K("tensor",q,H,G),G.enterFrame(m),[2,[Z(u)]];case 14:return u=K("tensor",q,H,G),G.exitFrame(),[2,[Z(u)]];case 15:return u=K("tensor",q,H,G),G.nextIteration(),[2,[Z(u)]];case 16:return m=K("size",q,H,G),d=K("dtype",q,H,G),z=K("elementShape",q,H,G),y=K("dynamicSize",q,H,G),l=K("clearAfterRead",q,H,G),c=K("identicalElementShapes",q,H,G),f=K("name",q,H,G),f=new le(f,d,m,z,c,y,l),G.addTensorArray(f),[2,[f.idTensor,W.scalar(1)]];case 17:return d=K("tensorArrayId",q,H,G),b=K("index",q,H,G),k=K("tensor",q,H,G),(c=G.getTensorArray(d.id)).write(b,k),[2,[c.idTensor]];case 18:return y=K("tensorArrayId",q,H,G),x=K("index",q,H,G),[2,[G.getTensorArray(y.id).read(x)]];case 19:return _=K("tensorArrayId",q,H,G),O=K("indices",q,H,G),l=K("dtype",q,H,G),[2,[G.getTensorArray(_.id).gather(O,l)]];case 20:return f=K("tensorArrayId",q,H,G),T=K("indices",q,H,G),v=K("tensor",q,H,G),(h=G.getTensorArray(f.id)).scatter(T,v),[2,[h.idTensor]];case 21:return A=K("tensorArrayId",q,H,G),h=G.getTensorArray(A.id),I=K("dtype",q,H,G),[2,[h.concat(I)]];case 22:return g=K("tensorArrayId",q,H,G),V=K("tensor",q,H,G),L=K("lengths",q,H,G),(g=G.getTensorArray(g.id)).split(L,V),[2,[g.idTensor]];case 23:return g=K("tensorArrayId",q,H,G),N=G.getTensorArray(g.id),[2,[W.scalar(N.size(),"int32")]];case 24:return N=K("tensorArrayId",q,H,G),(S=G.getTensorArray(N.id)).clearAndClose(),[2,[S.idTensor]];case 25:return D=K("tensorListId",q,H,G),b=K("index",q,H,G),k=K("tensor",q,H,G),(C=G.getTensorList(D.id)).setItem(b,k),[2,[C.idTensor]];case 26:return D=K("tensorListId",q,H,G),x=K("index",q,H,G),z=K("elementShape",q,H,G),M=K("elementDType",q,H,G),[2,[(C=G.getTensorList(D.id)).getItem(x,z,M)]];case 27:return T=K("indices",q,H,G),v=K("tensor",q,H,G),z=K("elementShape",q,H,G),w=K("numElements",q,H,G),C=function(e,t,a,n){if(t.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+t.length+" vs. "+e.shape[0]);var r=Math.max.apply(Math,Q(t));if(null!=n&&-1!==n&&n<=r)throw new Error("Max index must be < array size ("+r+"  vs. "+n+")");var s=new J([],a,e.dtype,n),o=W.unstack(e,0);return t.forEach(function(e,t){s.setItem(e,o[t])}),s}(v,T,z,w),G.addTensorList(C),[2,[C.idTensor]];case 28:return z=K("elementShape",q,H,G),E=K("elementDType",q,H,G),S=void 0,S="TensorListReserve"===q.op?"numElements":"maxNumElements",w=K(S,q,H,G),C=new J([],z,E,w),G.addTensorList(C),[2,[C.idTensor]];case 29:return _=K("tensorListId",q,H,G),O=K("indices",q,H,G),z=K("elementShape",q,H,G),E=K("elementDType",q,H,G),[2,[(C=G.getTensorList(_.id)).gather(O,E,z)]];case 30:return D=K("tensorListId",q,H,G),z=K("elementShape",q,H,G),E=K("elementDType",q,H,G),w=K("numElements",q,H,G),[2,[(C=G.getTensorList(D.id)).stack(z,E,w)]];case 31:return B=K("tensor",q,H,G),z=K("elementShape",q,H,G),E=K("elementDType",q,H,G),C=function(e,t,a){var n=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==a)throw new Error("Invalid data types; op elements "+e.dtype+", but list elements "+a);return Y(e.shape.slice(1),t,"TensorList shape mismatch: "),a=W.unstack(e),new J(a,t,n)}(B,z,E),G.addTensorList(C),[2,[C.idTensor]];case 32:return A=K("tensorListId",q,H,G),C=G.getTensorList(A.id),I=K("dtype",q,H,G),z=K("elementShape",q,H,G),[2,[C.concat(I,z)]];case 33:return D=K("tensorListId",q,H,G),k=K("tensor",q,H,G),(C=G.getTensorList(D.id)).pushBack(k),[2,[C.idTensor]];case 34:return D=K("tensorListId",q,H,G),z=K("elementShape",q,H,G),M=K("elementDType",q,H,G),[2,[(C=G.getTensorList(D.id)).popBack(z,M)]];case 35:return V=K("tensor",q,H,G),z=K("elementShape",q,H,G),L=K("lengths",q,H,G),C=function(r,s,e){var o=0,p=s.map(function(e){return o+=e});if(o!==r.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+o+", and tensor's shape is: "+r.shape);for(var i=ye(r.shape.slice(1),e),u=0===o?0:r.size/o,t=W.tidy(function(){var e=[];r=W.reshape(r,[1,o,u]);for(var t=0;t<s.length;++t){var a=0===t?0:p[t-1],n=[1,s[t],u];e[t]=W.reshape(W.slice(r,[0,a,0],n),i)}return r.dispose(),e}),a=new J([],e,r.dtype,s.length),n=0;n<t.length;n++)a.setItem(n,t[n]);return a}(V,L,z),G.addTensorList(C),[2,[C.idTensor]];case 36:throw TypeError("Node type "+q.op+" is not implemented")}})})}var he=void 0;function ge(e,t,a){var n=v(K("fusedOps",e,t,a),2),r=n[0],n=n[1],s="biasadd"===r,o=!s,p="prelu"===n,r="fusedbatchnorm"===r,i=K("numArgs",e,t,a);if(s){if(p&&2!==i)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!p&&s&&1!==i)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(r)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");var p=K("strides",e,t,a),s=l(e,t,a),i=K("dataFormat",e,t,a).toUpperCase(),r=K("dilations",e,t,a),u=v(K("args",e,t,a),2),m=u[0],u=u[1],o=(o&&(u=m,m=void 0),K("leakyreluAlpha",e,t,a));return{stride:p,pad:s,dataFormat:i,dilations:r,biasArg:m,preluArg:u,activationFunc:n,leakyreluAlpha:o}}var Ne=void 0;function be(e,t,a){return{boxes:K("boxes",e,t,a),scores:K("scores",e,t,a),maxOutputSize:K("maxOutputSize",e,t,a),iouThreshold:K("iouThreshold",e,t,a),scoreThreshold:K("scoreThreshold",e,t,a),softNmsSigma:K("softNmsSigma",e,t,a)}}Object.defineProperty(b.prototype,"id",{get:function(){return this.handle.id},enumerable:!0,configurable:!0}),b.prototype.clearAndClose=function(){this.tensorMap.forEach(function(e){return e.dispose()}),this.tensorMap.clear(),this.handle.dispose()},b.prototype.size=function(){return this.tensorMap.size},b.prototype.tensorSize=function(){return x.scalar(this.size(),"int32")},b.prototype.import=function(t,i){return y(this,void 0,void 0,function(){var o,p=this;return U(this,function(e){switch(e.label){case 0:return this.checkKeyAndValueTensor(t,i),[4,t.data()];case 1:return o=e.sent(),this.tensorMap.forEach(function(e){return e.dispose()}),this.tensorMap.clear(),[2,W.tidy(function(){var e=W.unstack(i),t=o.length,a=e.length;W.util.assert(t===a,function(){return"The number of elements doesn't match, keys has "+t+" elements, the values has "+a+" elements."});for(var n=0;n<t;n++){var r=o[n],s=e[n];W.keep(s),p.tensorMap.set(r,s)}return p.handle})]}})})},b.prototype.find=function(t,s){return y(this,void 0,void 0,function(){var n,r=this;return U(this,function(e){switch(e.label){case 0:return this.checkKeyAndValueTensor(t,s),[4,t.data()];case 1:return n=e.sent(),[2,W.tidy(function(){for(var e=[],t=0;t<n.length;t++){var a=n[t],a=r.findWithDefault(a,s);e.push(a)}return W.stack(e)})]}})})},b.prototype.findWithDefault=function(e,t){e=this.tensorMap.get(e);return null!=e?e:t},b.prototype.checkKeyAndValueTensor=function(e,t){if(e.dtype!==this.keyDType)throw new Error("Expect key dtype "+this.keyDType+", but got "+e.dtype);if(t.dtype!==this.valueDType)throw new Error("Expect value dtype "+this.valueDType+", but got "+t.dtype)};var xe=b;function b(e,t){this.keyDType=e,this.valueDType=t,this.handle=W.scalar(0),this.tensorMap=new Map,W.keep(this.handle)}var Te=void 0;function ve(e,t,a,n){e=function(g,N,b){switch(g.category){case"arithmetic":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[x.add(K("a",e,t,a),K("b",e,t,a))];case"AddN":return[x.addN(K("tensors",e,t,a))];case"FloorMod":case"Mod":return[x.mod(K("a",e,t,a),K("b",e,t,a))];case"Mul":return[x.mul(K("a",e,t,a),K("b",e,t,a))];case"RealDiv":case"Div":return[x.div(K("a",e,t,a),K("b",e,t,a))];case"DivNoNan":return[x.divNoNan(K("a",e,t,a),K("b",e,t,a))];case"FloorDiv":return[x.floorDiv(K("a",e,t,a),K("b",e,t,a))];case"Sub":return[x.sub(K("a",e,t,a),K("b",e,t,a))];case"Minimum":return[x.minimum(K("a",e,t,a),K("b",e,t,a))];case"Maximum":return[x.maximum(K("a",e,t,a),K("b",e,t,a))];case"Pow":return[x.pow(K("a",e,t,a),K("b",e,t,a))];case"SquaredDifference":return[x.squaredDifference(K("a",e,t,a),K("b",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"basic_math":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"Abs":case"ComplexAbs":return[x.abs(K("x",e,t,a))];case"Acos":return[x.acos(K("x",e,t,a))];case"Acosh":return[x.acosh(K("x",e,t,a))];case"Asin":return[x.asin(K("x",e,t,a))];case"Asinh":return[x.asinh(K("x",e,t,a))];case"Atan":return[x.atan(K("x",e,t,a))];case"Atan2":return[x.atan2(K("x",e,t,a),K("y",e,t,a))];case"Atanh":return[x.atanh(K("x",e,t,a))];case"Ceil":return[x.ceil(K("x",e,t,a))];case"Complex":return[x.complex(K("real",e,t,a),K("imag",e,t,a))];case"Cos":return[x.cos(K("x",e,t,a))];case"Cosh":return[x.cosh(K("x",e,t,a))];case"Elu":return[x.elu(K("x",e,t,a))];case"Erf":return[x.erf(K("x",e,t,a))];case"Exp":return[x.exp(K("x",e,t,a))];case"Expm1":return[x.expm1(K("x",e,t,a))];case"Floor":return[x.floor(K("x",e,t,a))];case"Log":return[x.log(K("x",e,t,a))];case"Log1p":return[x.log1p(K("x",e,t,a))];case"Imag":return[x.imag(K("x",e,t,a))];case"Neg":return[x.neg(K("x",e,t,a))];case"Reciprocal":return[x.reciprocal(K("x",e,t,a))];case"Real":return[x.real(K("x",e,t,a))];case"Relu":return[x.relu(K("x",e,t,a))];case"Round":return[x.round(K("x",e,t,a))];case"Selu":return[x.selu(K("x",e,t,a))];case"Sigmoid":return[x.sigmoid(K("x",e,t,a))];case"Sin":return[x.sin(K("x",e,t,a))];case"Sign":return[x.sign(K("x",e,t,a))];case"Sinh":return[x.sinh(K("x",e,t,a))];case"Softplus":return[x.softplus(K("x",e,t,a))];case"Sqrt":return[x.sqrt(K("x",e,t,a))];case"Square":return[x.square(K("x",e,t,a))];case"Tanh":return[x.tanh(K("x",e,t,a))];case"Tan":return[x.tan(K("x",e,t,a))];case"ClipByValue":return[x.clipByValue(K("x",e,t,a),K("clipValueMin",e,t,a),K("clipValueMax",e,t,a))];case"Relu6":return[x.relu6(K("x",e,t,a))];case"Rsqrt":return[x.rsqrt(X(e.inputNames[0],t,a))];case"Prod":return[x.prod(K("x",e,t,a),K("axes",e,t,a))];case"LeakyRelu":return[x.leakyRelu(K("x",e,t,a),K("alpha",e,t,a))];case"Prelu":return[x.prelu(K("x",e,t,a),K("alpha",e,t,a))];case"IsNan":return[x.isNaN(X(e.inputNames[0],t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"control":return fe(g,N,b);case"convolution":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"Conv1D":var n=K("stride",e,t,a),r=K("pad",e,t,a),s=K("dataFormat",e,t,a).toUpperCase(),o=K("dilation",e,t,a);return[x.conv1d(K("x",e,t,a),K("filter",e,t,a),n,r,s,o)];case"Conv2D":var n=K("strides",e,t,a),r=l(e,t,a),s=K("dataFormat",e,t,a).toUpperCase(),p=K("dilations",e,t,a);return[x.conv2d(K("x",e,t,a),K("filter",e,t,a),[n[1],n[2]],r,s,[p[1],p[2]])];case"_FusedConv2D":var o=ge(e,t,a),n=o.stride,r=o.pad,s=o.dataFormat,p=o.dilations,i=o.biasArg,u=o.preluArg,m=o.activationFunc,d=o.leakyreluAlpha;return[x.fused.conv2d({x:K("x",e,t,a),filter:K("filter",e,t,a),strides:[n[1],n[2]],pad:r,dataFormat:s,dilations:[p[1],p[2]],bias:i,activation:m,preluActivationWeights:u,leakyreluAlpha:d})];case"FusedDepthwiseConv2dNative":var o=ge(e,t,a),n=o.stride,r=o.pad,s=o.dataFormat,p=o.dilations,i=o.biasArg,u=o.preluArg,m=o.activationFunc,d=o.leakyreluAlpha;return[x.fused.depthwiseConv2d({x:K("x",e,t,a),filter:K("filter",e,t,a),strides:[n[1],n[2]],pad:r,dataFormat:s,dilations:[p[1],p[2]],bias:i,activation:m,preluActivationWeights:u,leakyreluAlpha:d})];case"Conv2DBackpropInput":case"Conv2dTranspose":var o=K("outputShape",e,t,a),n=K("strides",e,t,a),r=l(e,t,a);return[x.conv2dTranspose(K("x",e,t,a),K("filter",e,t,a),o,[n[1],n[2]],r)];case"DepthwiseConv2dNative":case"DepthwiseConv2d":n=K("strides",e,t,a),r=l(e,t,a),p=K("dilations",e,t,a),s=K("dataFormat",e,t,a).toUpperCase();return[x.depthwiseConv2d(K("input",e,t,a),K("filter",e,t,a),[n[1],n[2]],r,s,[p[1],p[2]])];case"Conv3D":n=K("strides",e,t,a),r=K("pad",e,t,a),s=K("dataFormat",e,t,a).toUpperCase(),p=K("dilations",e,t,a);return[x.conv3d(K("x",e,t,a),K("filter",e,t,a),[n[1],n[2],n[3]],r,s,[p[1],p[2],p[3]])];case"AvgPool":var n=K("strides",e,t,a),r=K("pad",e,t,a),c=K("kernelSize",e,t,a);return[x.avgPool(K("x",e,t,a),[c[1],c[2]],[n[1],n[2]],r)];case"MaxPool":n=K("strides",e,t,a),r=K("pad",e,t,a),c=K("kernelSize",e,t,a);return[x.maxPool(K("x",e,t,a),[c[1],c[2]],[n[1],n[2]],r)];case"MaxPoolWithArgmax":var n=K("strides",e,t,a),r=K("pad",e,t,a),c=K("kernelSize",e,t,a),i=K("includeBatchInIndex",e,t,a),m=x.maxPoolWithArgmax(K("x",e,t,a),[c[1],c[2]],[n[1],n[2]],r,i);return[m.result,m.indexes];case"AvgPool3D":n=K("strides",e,t,a),r=K("pad",e,t,a),c=K("kernelSize",e,t,a);return[x.avgPool3d(K("x",e,t,a),[c[1],c[2],c[3]],[n[1],n[2],n[3]],r)];case"MaxPool3D":n=K("strides",e,t,a),r=K("pad",e,t,a),c=K("kernelSize",e,t,a);return[x.maxPool3d(K("x",e,t,a),[c[1],c[2],c[3]],[n[1],n[2],n[3]],r)];case"Dilation2D":u=K("strides",e,t,a),r=K("pad",e,t,a),p=K("dilations",e,t,a),d=u[1],o=u[2],s=p[1],i=p[2];return[x.dilation2d(K("x",e,t,a),K("filter",e,t,a),[d,o],r,[s,i],"NHWC")];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"creation":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"Fill":var n=K("shape",e,t,a),r=K("dtype",e,t,a),s=K("value",e,t,a);return[x.fill(n,s,r)];case"LinSpace":var o=K("start",e,t,a),s=K("stop",e,t,a),r=K("num",e,t,a);return[x.linspace(o,s,r)];case"Multinomial":var s=K("logits",e,t,a),r=K("numSamples",e,t,a),p=K("seed",e,t,a);return[x.multinomial(s,r,p)];case"OneHot":var s=K("indices",e,t,a),r=K("depth",e,t,a),i=K("onValue",e,t,a),u=K("offValue",e,t,a);return[x.oneHot(s,r,i,u)];case"Ones":return[x.ones(K("shape",e,t,a),K("dtype",e,t,a))];case"OnesLike":return[x.onesLike(K("x",e,t,a))];case"RandomUniform":return[x.randomUniform(K("shape",e,t,a),K("minval",e,t,a),K("maxval",e,t,a),K("dtype",e,t,a))];case"Range":o=K("start",e,t,a),s=K("stop",e,t,a),r=K("step",e,t,a);return[x.range(o,s,r,K("dtype",e,t,a))];case"TruncatedNormal":n=K("shape",e,t,a),i=K("mean",e,t,a),u=K("stdDev",e,t,a),p=K("seed",e,t,a);return[x.truncatedNormal(n,i,u,K("dtype",e,t,a),p)];case"Zeros":return[x.zeros(K("shape",e,t,a),K("dtype",e,t,a))];case"ZerosLike":return[x.zerosLike(K("x",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"dynamic":return m=g,d=N,c=b,y(Ne,void 0,void 0,function(){var t,a,n,r,s,o,p,i,u;return U(this,function(e){switch(e.label){case 0:switch(m.op){case"NonMaxSuppressionV5":return[3,1];case"NonMaxSuppressionV4":return[3,3];case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":return[3,5];case"Where":return[3,7];case"ListDiff":return[3,9]}return[3,10];case 1:return t=be(m,d,c),n=t.boxes,r=t.scores,s=t.maxOutputSize,o=t.iouThreshold,p=t.scoreThreshold,t=t.softNmsSigma,[4,x.image.nonMaxSuppressionWithScoreAsync(n,r,s,o,p,t)];case 2:return[2,[(u=e.sent()).selectedIndices,u.selectedScores]];case 3:return t=be(m,d,c),n=t.boxes,r=t.scores,s=t.maxOutputSize,o=t.iouThreshold,p=t.scoreThreshold,a=K("padToMaxOutputSize",m,d,c),[4,x.image.nonMaxSuppressionPaddedAsync(n,r,s,o,p,a)];case 4:return[2,[(u=e.sent()).selectedIndices,u.validOutputs]];case 5:return a=be(m,d,c),n=a.boxes,r=a.scores,s=a.maxOutputSize,o=a.iouThreshold,p=a.scoreThreshold,[4,x.image.nonMaxSuppressionAsync(n,r,s,o,p)];case 6:return[2,[e.sent()]];case 7:return i=x.cast(K("condition",m,d,c),"bool"),[4,x.whereAsync(i)];case 8:return u=[e.sent()],i.dispose(),[2,u];case 9:return[2,x.setdiff1dAsync(K("x",m,d,c),K("y",m,d,c))];case 10:throw TypeError("Node type "+m.op+" is not implemented")}})});case"evaluation":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"TopKV2":var n=K("x",e,t,a),r=K("k",e,t,a),s=K("sorted",e,t,a);return[(r=x.topk(n,r,s)).values,r.indices];case"Unique":n=K("x",e,t,a);return[(r=x.unique(n)).values,r.indices];case"UniqueV2":n=K("x",e,t,a),s=K("axis",e,t,a);return[(r=x.unique(n,s)).values,r.indices];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"image":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"ResizeBilinear":var n=K("images",e,t,a),r=K("size",e,t,a),s=K("alignCorners",e,t,a),o=K("halfPixelCenters",e,t,a);return[x.image.resizeBilinear(n,[r[0],r[1]],s,o)];case"ResizeNearestNeighbor":n=K("images",e,t,a),r=K("size",e,t,a),s=K("alignCorners",e,t,a),o=K("halfPixelCenters",e,t,a);return[x.image.resizeNearestNeighbor(n,[r[0],r[1]],s,o)];case"CropAndResize":var n=K("image",e,t,a),r=K("boxes",e,t,a),s=K("boxInd",e,t,a),o=K("cropSize",e,t,a),p=K("method",e,t,a),i=K("extrapolationValue",e,t,a);return[x.image.cropAndResize(n,r,s,o,p,i)];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"graph":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":var n=K("default",e,t,a);return[X(e.name,t,a)||n];case"Placeholder":return[X(e.name,t,a)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Z(K("x",e,t,a))];case"IdentityN":return K("x",e,t,a).map(Z);case"Snapshot":return[Z(K("x",e,t,a))];case"Shape":return[x.tensor1d(K("x",e,t,a).shape,"int32")];case"ShapeN":return K("x",e,t,a).map(function(e){return x.tensor1d(e.shape)});case"Size":return[x.scalar(K("x",e,t,a).size,"int32")];case"Rank":return[x.scalar(K("x",e,t,a).rank,"int32")];case"NoOp":return[x.scalar(1)];case"Print":var n=K("x",e,t,a),r=K("data",e,t,a),s=K("message",e,t,a),o=K("summarize",e,t,a);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(s);for(var p=0;p<r.length;p++)console.log(Array.prototype.slice.call(r[p].dataSync()).slice(0,o));return[n];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"logical":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"Equal":return[x.equal(K("a",e,t,a),K("b",e,t,a))];case"NotEqual":return[x.notEqual(K("a",e,t,a),K("b",e,t,a))];case"Greater":return[x.greater(K("a",e,t,a),K("b",e,t,a))];case"GreaterEqual":return[x.greaterEqual(K("a",e,t,a),K("b",e,t,a))];case"Less":return[x.less(K("a",e,t,a),K("b",e,t,a))];case"LessEqual":return[x.lessEqual(K("a",e,t,a),K("b",e,t,a))];case"LogicalAnd":return[x.logicalAnd(K("a",e,t,a),K("b",e,t,a))];case"LogicalNot":return[x.logicalNot(K("a",e,t,a))];case"LogicalOr":return[x.logicalOr(K("a",e,t,a),K("b",e,t,a))];case"Select":case"SelectV2":return[x.where(K("condition",e,t,a),K("a",e,t,a),K("b",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"matrices":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[x.matMul(K("a",e,t,a),K("b",e,t,a),K("transposeA",e,t,a),K("transposeB",e,t,a))];case"Einsum":return[x.einsum.apply(x,Q([K("equation",e,t,a)],K("tensors",e,t,a)))];case"Transpose":return[x.transpose(K("x",e,t,a),K("perm",e,t,a))];case"_FusedMatMul":var n=v(K("fusedOps",e,t,a),2),r=n[0],n=n[1],r="biasadd"===r,s="prelu"===n,o=K("numArgs",e,t,a),p=K("leakyreluAlpha",e,t,a);if(r){if(s&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!s&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}r=v(K("args",e,t,a),2),s=r[0],o=r[1];return[x.fused.matMul({a:K("a",e,t,a),b:K("b",e,t,a),transposeA:K("transposeA",e,t,a),transposeB:K("transposeB",e,t,a),bias:s,activation:n,preluActivationWeights:o,leakyreluAlpha:p})];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"normalization":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[x.batchNorm(K("x",e,t,a),K("mean",e,t,a),K("variance",e,t,a),K("offset",e,t,a),K("scale",e,t,a),K("epsilon",e,t,a))];case"LRN":return[x.localResponseNormalization(K("x",e,t,a),K("radius",e,t,a),K("bias",e,t,a),K("alpha",e,t,a),K("beta",e,t,a))];case"Softmax":return[x.softmax(K("x",e,t,a))];case"LogSoftmax":return[x.logSoftmax(K("x",e,t,a))];case"SparseToDense":return[x.sparseToDense(K("sparseIndices",e,t,a),K("outputShape",e,t,a),K("sparseValues",e,t,a),K("defaultValue",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"reduction":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"Max":var n=K("axis",e,t,a),r=K("keepDims",e,t,a);return[x.max(K("x",e,t,a),n,r)];case"Mean":n=K("axis",e,t,a),r=K("keepDims",e,t,a);return[x.mean(K("x",e,t,a),n,r)];case"Min":n=K("axis",e,t,a),r=K("keepDims",e,t,a);return[x.min(K("x",e,t,a),n,r)];case"Sum":n=K("axis",e,t,a),r=K("keepDims",e,t,a);return[x.sum(K("x",e,t,a),n,r)];case"All":n=K("axis",e,t,a),r=K("keepDims",e,t,a);return[x.all(K("x",e,t,a),n,r)];case"Any":n=K("axis",e,t,a),r=K("keepDims",e,t,a);return[x.any(K("x",e,t,a),n,r)];case"ArgMax":n=K("axis",e,t,a);return[x.argMax(K("x",e,t,a),n)];case"ArgMin":n=K("axis",e,t,a);return[x.argMin(K("x",e,t,a),n)];case"Prod":n=K("axis",e,t,a),r=K("keepDims",e,t,a);return[x.prod(K("x",e,t,a),n,r)];case"Cumsum":var n=K("axis",e,t,a),r=K("exclusive",e,t,a),s=K("reverse",e,t,a);return[x.cumsum(K("x",e,t,a),n,r,s)];case"Bincount":n=K("x",e,t,a),r=K("weights",e,t,a),s=K("size",e,t,a);return[x.bincount(n,r,s)];case"DenseBincount":var n=K("x",e,t,a),r=K("weights",e,t,a),s=K("size",e,t,a),o=K("binaryOutput",e,t,a);return[x.denseBincount(n,r,s,o)];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"slice_join":return W.tidy(function(){var r=g,s=N,o=b;switch(r.op){case"ConcatV2":case"Concat":var e=K("n",r,s,o),t=K("axis",r,s,o),a=(a=K("tensors",r,s,o)).slice(0,e);return[x.concat(a,t)];case"Gather":var n=K("x",r,s,o),p=K("indices",r,s,o);return[x.gather(n,x.cast(p,"int32"),0)];case"GatherV2":var t=K("axis",r,s,o),e=K("batchDims",r,s,o),n=K("x",r,s,o),p=K("indices",r,s,o);return[x.gather(n,x.cast(p,"int32"),t,e)];case"Reverse":for(var i=K("dims",r,s,o),t=[],u=0;u<i.length;u++)i[u]&&t.push(u);n=K("x",r,s,o);return[x.reverse(n,t)];case"ReverseV2":t=K("axis",r,s,o),n=K("x",r,s,o);return[x.reverse(n,t)];case"Slice":var m=K("begin",r,s,o),a=K("size",r,s,o);return[x.slice(K("x",r,s,o),m,a)];case"StridedSlice":var m=K("begin",r,s,o),e=K("end",r,s,o),n=K("strides",r,s,o),a=K("beginMask",r,s,o),d=K("endMask",r,s,o),c=K("ellipsisMask",r,s,o),y=K("newAxisMask",r,s,o),l=K("shrinkAxisMask",r,s,o),f=K("x",r,s,o);return[x.stridedSlice(f,m,e,n,a,d,c,y,l)];case"Pack":return W.tidy(function(){var e=K("axis",r,s,o),t=K("tensors",r,s,o),a=t[0].shape,n=x.squeeze(t[0]).shape,t=t.map(function(e){var t=W.util.arraysEqual(e.shape,a);if(t||W.util.arraysEqual(x.squeeze(e).shape,n))return t?e:x.reshape(e,a);throw new Error("the input tensors shape does not match")});return[x.stack(t,e)]});case"Unpack":t=K("axis",r,s,o),f=K("tensor",r,s,o);return x.unstack(f,t);case"Tile":m=K("reps",r,s,o);return[x.tile(K("x",r,s,o),m)];case"Split":case"SplitV":t=K("axis",r,s,o),e=K("numOrSizeSplits",r,s,o),f=K("x",r,s,o);return x.split(f,e,t);case"ScatterNd":var p=K("indices",r,s,o),n=K("values",r,s,o),h=K("shape",r,s,o);return[x.scatterND(p,n,h)];case"GatherNd":a=K("x",r,s,o),p=K("indices",r,s,o);return[x.gatherND(a,p)];case"SparseToDense":p=K("sparseIndices",r,s,o),h=K("outputShape",r,s,o),d=K("sparseValues",r,s,o),c=K("defaultValue",r,s,o);return[x.sparseToDense(p,d,h,d.dtype===c.dtype?c:x.cast(c,d.dtype))];default:throw TypeError("Node type "+r.op+" is not implemented")}});case"sparse":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"SparseFillEmptyRows":var n=x.sparse.sparseFillEmptyRows(K("indices",e,t,a),K("values",e,t,a),K("denseShape",e,t,a),K("defaultValue",e,t,a));return[n.outputIndices,n.outputValues,n.emptyRowIndicator,n.reverseIndexMap];case"SparseReshape":n=x.sparse.sparseReshape(K("inputIndices",e,t,a),K("inputShape",e,t,a),K("newShape",e,t,a));return[n.outputIndices,n.outputShape];case"SparseSegmentMean":return[x.sparse.sparseSegmentMean(K("data",e,t,a),K("indices",e,t,a),K("segmentIds",e,t,a))];case"SparseSegmentSum":return[x.sparse.sparseSegmentSum(K("data",e,t,a),K("indices",e,t,a),K("segmentIds",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"spectral":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"FFT":return[x.fft(K("x",e,t,a))];case"IFFT":return[x.ifft(K("x",e,t,a))];case"RFFT":return[x.rfft(K("x",e,t,a))];case"IRFFT":return[x.irfft(K("x",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"string":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"StringNGrams":var n=x.string.stringNGrams(K("data",e,t,a),K("dataSplits",e,t,a),K("separator",e,t,a),K("nGramWidths",e,t,a),K("leftPad",e,t,a),K("rightPad",e,t,a),K("padWidth",e,t,a),K("preserveShortSequences",e,t,a));return[n.nGrams,n.nGramsSplits];case"StringSplit":n=x.string.stringSplit(K("input",e,t,a),K("delimiter",e,t,a),K("skipEmpty",e,t,a));return[n.indices,n.values,n.shape];case"StringToHashBucketFast":return[x.string.stringToHashBucketFast(K("input",e,t,a),K("numBuckets",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"transformation":return W.tidy(function(){var e=g,t=N,a=b;switch(e.op){case"Cast":return[x.cast(K("x",e,t,a),K("dtype",e,t,a))];case"ExpandDims":var n=K("axis",e,t,a);return[x.expandDims(K("x",e,t,a),n)];case"Squeeze":n=K("axis",e,t,a);return[x.squeeze(K("x",e,t,a),n)];case"Reshape":return[x.reshape(K("x",e,t,a),K("shape",e,t,a))];case"MirrorPad":return[x.mirrorPad(K("x",e,t,a),K("padding",e,t,a),K("mode",e,t,a))];case"PadV2":case"Pad":return[x.pad(K("x",e,t,a),K("padding",e,t,a),K("constantValue",e,t,a))];case"SpaceToBatchND":var r=K("blockShape",e,t,a),n=K("paddings",e,t,a);return[x.spaceToBatchND(K("x",e,t,a),r,n)];case"BatchToSpaceND":r=K("blockShape",e,t,a),n=K("crops",e,t,a);return[x.batchToSpaceND(K("x",e,t,a),r,n)];case"DepthToSpace":r=K("blockSize",e,t,a),n=K("dataFormat",e,t,a).toUpperCase();return[x.depthToSpace(K("x",e,t,a),r,n)];case"BroadcastTo":return[x.broadcastTo(K("x",e,t,a),K("shape",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}});case"hash_table":return o=g,p=N,i=b,u=n,y(Te,void 0,void 0,function(){var t,a,n,r,s;return U(this,function(e){switch(e.label){case 0:switch(o.op){case"HashTable":case"HashTableV2":return[3,1];case"LookupTableImport":case"LookupTableImportV2":return[3,2];case"LookupTableFind":case"LookupTableFindV2":return[3,4];case"LookupTableSize":case"LookupTableSizeV2":return[3,6]}return[3,7];case 1:return s=K("keyDType",o,p,i),t=K("valueDType",o,p,i),s=new xe(s,t),u.addHashTable(o.name,s),[2,[s.handle]];case 2:return r=K("tableHandle",o,p,i,u),a=K("keys",o,p,i),t=K("values",o,p,i),[4,(s=u.getHashTableById(r.id)).import(a,t)];case 3:return[2,[e.sent()]];case 4:return r=K("tableHandle",o,p,i,u),a=K("keys",o,p,i),n=K("defaultValue",o,p,i),[4,(s=u.getHashTableById(r.id)).find(a,n)];case 5:return[2,[e.sent()]];case 6:return r=K("tableHandle",o,p,i,u),[2,[(s=u.getHashTableById(r.id)).tensorSize()]];case 7:throw TypeError("Node type "+o.op+" is not implemented")}})});case"custom":var e=A(g.op);if(e&&e.customExecutor)return e.customExecutor(new me(g,N,b));throw TypeError("Custom op "+g.op+" is not registered.");default:throw TypeError("Unknown op '"+g.op+"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}var o,p,i,u,m,d,c}(e,t,a);return W.util.isPromise(e)?e.then(function(e){return[].concat(e)}):[].concat(e)}_.prototype.newFrame=function(e,t){return{id:e,frameName:t,iterationId:0}},Object.defineProperty(_.prototype,"currentContext",{get:function(){return this.contexts},set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(_.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(_.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),_.prototype.generateCurrentContextIds=function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(""),this._currentContextIds=e},_.prototype.contextIdforContexts=function(e){return e?e.map(function(e){return 0===e.id&&0===e.iterationId?"":e.frameName+"-"+e.iterationId}).join("/"):""},_.prototype.enterFrame=function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},_.prototype.exitFrame=function(){if(!(this.contexts&&1<this.contexts.length))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},_.prototype.nextIteration=function(){if(!(this.contexts&&0<this.contexts.length))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},_.prototype.getWeight=function(e){return this.weightMap[e]},_.prototype.addTensorArray=function(e){this.tensorArrayMap[e.id]=e},_.prototype.getTensorArray=function(e){return this.tensorArrayMap[e]},_.prototype.addTensorList=function(e){this.tensorListMap[e.id]=e},_.prototype.getTensorList=function(e){return this.tensorListMap[e]},_.prototype.dispose=function(e){for(var t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(var t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)};var Se=_;function _(e,t,a,n){void 0===t&&(t={}),void 0===a&&(a={}),void 0===n&&(n={}),this.weightMap=e=void 0===e?{}:e,this.tensorArrayMap=t,this.tensorListMap=a,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}function _e(e,t,a,n){for(var r=new Set,s=[],o=null,p=null,i=new Set,u=Object.keys(e).map(function(e){return S(e)[0]}),m=[],d=(null!=n&&(m=n.map(function(e){return S(e.name)[0]})),Q(t));0<d.length;){var c=d.pop();(Ae(c)||0<=we.indexOf(c.op)||0<=Ee.indexOf(c.op))&&null==o&&(p=(o=c).children.map(function(e){return e.name}).filter(function(e){return r.has(e)})),r.add(c.name),null==a[c.name]&&-1===u.indexOf(c.name)&&-1===m.indexOf(c.name)&&(0===c.inputs.length?s.push(c.name):c.inputs.forEach(function(e){i.has(e.name)||(i.add(e.name),d.push(e))}))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:s,dynamicNode:o,syncInputs:p}}var Oe=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],we=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Ee=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Ae(e){return 0<=Oe.indexOf(e.op)}Object.defineProperty(O.prototype,"weightIds",{get:function(){return this.parent?this.parent.weightIds:this._weightIds},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"functionExecutorMap",{get:function(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"weightMap",{get:function(){return this.parent?this.parent.weightMap:this._weightMap},set:function(t){var e=Object.keys(t).map(function(e){return t[e].map(function(e){return e.id})});this._weightIds=[].concat.apply([],Q(e)),this._weightMap=t},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"resourceManager",{set:function(e){this._resourceManager=e},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"inputs",{get:function(){return this._inputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"outputs",{get:function(){return this._outputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"inputNodes",{get:function(){return this._inputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"outputNodes",{get:function(){return this._outputs.map(function(e){var t=e.signatureKey||e.name;return e.defaultOutput?t+":"+e.defaultOutput:t})},enumerable:!0,configurable:!0}),Object.defineProperty(O.prototype,"functions",{get:function(){var a=this;return Object.keys(this._functions).reduce(function(e,t){return e[t]=a._functions[t].signature,e},{})},enumerable:!0,configurable:!0}),O.prototype.getCompilationKey=function(e,t){e=e.map(function(e){return e.name}).sort(),t=t.map(function(e){return e.name}).sort();return e.join(this.SEPERATOR)+"--"+t.join(this.SEPERATOR)},O.prototype.compile=function(e,t){var a=_e(e,t,this.weightMap,this._initNodes),n=a.missingInputs,r=a.dynamicNode,s=a.syncInputs;if(null!=r)throw new Error("This execution contains the node '"+r.name+"', which has the dynamic op '"+r.op+"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs ["+s+"]");if(0<n.length)throw r=t.map(function(e){return e.name}),s=Object.keys(e),new Error("Cannot compute the outputs ["+r+"] from the provided inputs ["+s+"]. Missing the following inputs: ["+n+"]");for(var o=this.graph,p=this.weightMap,i=(t=a).usedNodes,t=t.inputs,u=[],t=Object.keys(t).map(function(e){return S(e)[0]}).map(function(e){return o.nodes[e]}),e=o.initNodes,m=(t.forEach(function(e){i.has(e.name)&&u.push(e)}),o.weights.forEach(function(e){i.has(e.name)&&u.push(e)}),null!=e&&e.forEach(function(e){i.has(e.name)&&u.push(e)}),new Set),d=[];0<u.length;){var c=u.pop();m.add(c.name),p[c.name]||d.push(c),c.children.forEach(function(e){!m.has(e.name)&&i.has(e.name)&&e.inputs.every(function(e){return m.has(e.name)})&&u.push(e)})}return d},O.prototype.execute=function(p,i){var u=this,e=(p=this.mapInputs(p),Object.keys(p).sort()),e=(this.checkInputs(p),this.checkInputShapeAndType(p),i=this.mapOutputs(i),this.checkOutputs(i),e.map(function(e){return u.graph.nodes[S(e)[0]]})),m=i.map(function(e){return S(e)[0]}),t=m.map(function(e){return u.graph.nodes[e]}),e=(0===t.length&&(t=this._outputs),this.getCompilationKey(e,t)),d=this.compiledMap.get(e),c=(null==d&&(d=this.compile(p,t),this.compiledMap.set(e,d)),{}),y={};return W.tidy(function(){for(var t=new Se(u.weightMap,c,y,u.functionExecutorMap),r=T({},u.weightMap),e=(Object.keys(p).forEach(function(e){var t=v(S(e),2),a=t[0],n=[];n[t[1]]=p[e],r[a]=n}),u.getFrozenTensorIds(r)),a={},n=0;n<d.length;n++){var s=d[n];if(!r[s.name]){var o=ve(s,r,t,u._resourceManager);if(W.util.isPromise(o))throw new Error("The execution of the op '"+s.op+"' returned a promise. Please use model.executeAsync() instead.");r[s.name]=o,u.checkTensorForDisposal(s.name,s,r,t,e,m,a)}}return null==u.parent&&t.dispose(e),i.map(function(e){return X(e,r,t)})})},O.prototype.getFrozenTensorIds=function(t){var e=[].concat.apply([],Object.keys(t).map(function(e){return t[e]}).map(function(e){return e.map(function(e){return e.id})}));return new Set(e)},O.prototype.checkTensorForDisposal=function(e,t,a,n,r,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(a[e].forEach(function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(function(e){"control"!==e.category&&(e=e.name,null!=(e=a[p(e,n.currentContextId)]))&&e.forEach(function(e){var t;!e||e.kept||r.has(e.id)||(1===(t=o[e.id])?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--)})}))},O.prototype.executeAsync=function(t,a){return y(this,void 0,void 0,function(){return U(this,function(e){return[2,this._executeAsync(t,a)]})})},O.prototype._executeAsync=function(p,i,u,m,d){return void 0===u&&(u=!1),void 0===m&&(m={}),void 0===d&&(d={}),y(this,void 0,void 0,function(){var t,a,n,r,s,o;return U(this,function(e){switch(e.label){case 0:return u||(p=this.mapInputs(p),this.checkInputs(p),this.checkInputShapeAndType(p),i=this.mapOutputs(i),this.checkOutputs(i)),t=new Se(this.weightMap,m,d,this.functionExecutorMap),[4,this.executeWithControlFlow(p,t,i,u)];case 1:return a=e.sent(),n=i.map(function(e){return X(e,a,t)}),r=n.map(function(e){return e.id}),s=Object.keys(p).map(function(e){return p[e].id}),o=new Set(Q(r,s,this.weightIds)),Object.keys(a).forEach(function(e){a[e].forEach(function(e){!e||e.kept||e.isDisposed||o.has(e.id)||e.dispose()})}),null==this.parent&&t.dispose(o),[2,n]}})})},O.prototype.executeFunctionAsync=function(a,r,s){return y(this,void 0,void 0,function(){var t,n=this;return U(this,function(e){return t=a.reduce(function(e,t,a){return e[n.inputs[a].name]=t,e},{}),[2,this._executeAsync(t,this.outputNodes,!0,r,s)]})})},O.prototype.executeWithControlFlow=function(h,g,N,b){return y(this,void 0,void 0,function(){var t,a,n,r,s,o,p,i,u,m,d,c,y,l,f=this;return U(this,function(e){switch(e.label){case 0:t=Object.keys(h),a=t.map(function(e){return f.graph.nodes[S(e)[0]]}),n=N.map(function(e){return S(e)[0]}),0===(r=n.map(function(e){return f.graph.nodes[e]})).length&&(r=this._outputs),i=_e(h,r,this.weightMap,this._initNodes),s=i.usedNodes,o=i.missingInputs,p=i.dynamicNode,i=i.syncInputs,u=Q(a,this.graph.weights,this._initNodes||[]).map(function(e){return{node:e,contexts:g.currentContext}}),m=T({},this.weightMap),Object.keys(h).forEach(function(e){var t=v(S(e),2),a=t[0],n=[];n[t[1]]=h[e],m[a]=n}),d={},c=this.getFrozenTensorIds(m),y={},e.label=1;case 1:return 0<u.length?(l=this.processStack(a,u,g,m,y,c,n,d,s),[4,Promise.all(l)]):[3,3];case 2:return e.sent(),[3,1];case 3:if(null!=p||b||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),0<(l=r.filter(function(e){return!Ae(e)&&!X(e.name,m,g)}).map(function(e){return e.name})).length)throw new Error("Cannot compute the outputs ["+l+"] from the provided inputs ["+t+"]. Consider providing the following inputs: ["+o+"]. "+(null!=p?"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs ["+i+"]":""));return[2,m]}})})},O.prototype.processStack=function(e,s,o,p,i,u,m,d,c){for(var y=this,l=[],f=this;0<s.length;)!function(){var e,t,a,n=s.pop(),r=(o.currentContext=n.contexts,"");"Enter"===n.node.op&&K("isConstant",n.node,p,o)&&(t=v(h(n.node.name,o),1),r=t[0]),null==p[n.node.name]?(t=ve(n.node,p,o,f._resourceManager),r||(e=v(h(n.node.name,o),1),r=e[0]),a=o.currentContext,W.util.isPromise(t)?l.push(t.then(function(e){return p[r]=e,o.currentContext=a,y.checkTensorForDisposal(r,n.node,p,o,u,m,d),y.processChildNodes(n.node,s,o,p,i,c),e})):(p[r]=t,f.checkTensorForDisposal(r,n.node,p,o,u,m,d),f.processChildNodes(n.node,s,o,p,i,c))):f.processChildNodes(n.node,s,o,p,i,c)}();return l},O.prototype.processChildNodes=function(e,a,n,r,s,o){e.children.forEach(function(e){var t=v(h(e.name,n),1)[0];!s[t]&&o.has(e.name)&&("Merge"===e.op?e.inputNames.some(function(e){return!!X(e,r,n)})&&(s[t]=!0,a.push({contexts:n.currentContext,node:e})):e.inputNames.every(function(e){return!!X(e,r,n)})&&(s[t]=!0,a.push({contexts:n.currentContext,node:e})))})},O.prototype.dispose=function(){var t=this;Object.keys(this.weightMap).forEach(function(e){return t.weightMap[e].forEach(function(e){return e.dispose()})})},O.prototype.checkInputShapeAndType=function(r){var s=this;Object.keys(r).forEach(function(e){var a,t=r[e],e=v(S(e),1)[0],n=s.graph.nodes[e];n.attrParams.shape&&n.attrParams.shape.value&&(e=(a=n.attrParams.shape.value).length===t.shape.length&&t.shape.every(function(e,t){return-1===a[t]||a[t]===e}),W.util.assert(e,function(){return"The shape of dict['"+n.name+"'] provided in model.execute(dict) must be ["+a+"], but was ["+t.shape+"]"})),n.attrParams.dtype&&n.attrParams.dtype.value&&W.util.assert(t.dtype===n.attrParams.dtype.value,function(){return"The dtype of dict['"+n.name+"'] provided in model.execute(dict) must be "+n.attrParams.dtype.value+", but was "+t.dtype})})},O.prototype.mapInputs=function(e){var t,a={};for(t in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[t]?a[this._signature.inputs[t].name]=e[t]:a[t]=e[t];return a},O.prototype.checkInputs=function(e){var t=this,e=Object.keys(e).filter(function(e){e=v(S(e),1)[0];return null==t.graph.nodes[e]});if(0<e.length)throw new Error("The dict provided in model.execute(dict) has keys: ["+e+"] that are not part of graph")},O.prototype.mapOutputs=function(e){var t=this;return e.map(function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e},{})},O.prototype.checkOutputs=function(e){var a=this;e.forEach(function(e){var t=v(S(e),1)[0];if(!a.graph.nodes[t])throw new Error("The output '"+e+"' is not found in the graph")})};var Ie=O;function O(t,e){var a=this;this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(function(e){a._functionExecutorMap[e]=new O(t.functions[e],a)})}w.prototype.addHashTable=function(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t},w.prototype.getHashTableHandleByName=function(e){return this.hashTableNameToHandle[e]},w.prototype.getHashTableById=function(e){return this.hashTableMap[e]},w.prototype.dispose=function(){for(var e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(var t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]};var ke=w;function w(e,t){void 0===t&&(t={}),this.hashTableNameToHandle=e=void 0===e?{}:e,this.hashTableMap=t}Object.defineProperty(E.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(E.prototype,"inputNodes",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(E.prototype,"outputNodes",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(E.prototype,"inputs",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(E.prototype,"outputs",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(E.prototype,"weights",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),Object.defineProperty(E.prototype,"metadata",{get:function(){return this.artifacts.userDefinedMetadata},enumerable:!0,configurable:!0}),Object.defineProperty(E.prototype,"modelSignature",{get:function(){return this.signature},enumerable:!0,configurable:!0}),E.prototype.findIOHandler=function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=W.io.browserHTTPRequest(e,this.loadOptions);else{var t=W.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(W.io.browserHTTPRequest(e,this.loadOptions));else if(1<t.length)throw new Error("Found more than one ("+t.length+") load handlers for URL '"+[e]+"'");this.handler=t[0]}},E.prototype.load=function(){return y(this,void 0,void 0,function(){var t;return U(this,function(e){switch(e.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,this.handler.load()];case 1:return t=e.sent(),[2,this.loadSync(t)]}})})},E.prototype.loadSync=function(e){this.artifacts=e;var t=this.artifacts.modelTopology,a=(null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata:this.artifacts).signature,a=(this.signature=a,this.version=t.versions.producer+"."+t.versions.minConsumer,W.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs));return this.executor=new Ie(ae.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(a),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node&&(t=ae.Instance.transformGraph(e.modelInitializer),this.initializer=new Ie(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])),!0},E.prototype.save=function(a,e){return y(this,void 0,void 0,function(){var t;return U(this,function(e){if("string"==typeof a){if(0===(t=W.io.getSaveHandlers(a)).length)throw new Error("Cannot find any save handlers for URL '"+a+"'");if(1<t.length)throw new Error("Found more than one ("+t.length+") save handlers for URL '"+a+"'");a=t[0]}if(null==a.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return[2,a.save(this.artifacts)]})})},E.prototype.predict=function(e,t){return this.execute(e,this.outputNodes)},E.prototype.normalizeInputs=function(n){if(!(n instanceof W.Tensor||Array.isArray(n)))return n;if((n=Array.isArray(n)?n:[n]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,the graph model has "+this.inputNodes.length+" placeholders, while there are "+n.length+" input tensors.");return this.inputNodes.reduce(function(e,t,a){return e[t]=n[a],e},{})},E.prototype.normalizeOutputs=function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]},E.prototype.execute=function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);e=this.executor.execute(e,t);return 1<e.length?e:e[0]},E.prototype.executeAsync=function(a,n){return y(this,void 0,void 0,function(){var t;return U(this,function(e){switch(e.label){case 0:return a=this.normalizeInputs(a),n=this.normalizeOutputs(n),[4,this.executor.executeAsync(a,n)];case 1:return[2,1<(t=e.sent()).length?t:t[0]]}})})},E.prototype.convertTensorMapToTensorsMap=function(a){return Object.keys(a).reduce(function(e,t){return e[t]=[a[t]],e},{})},E.prototype.dispose=function(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()};var De=E;function E(e,t){void 0===t&&(t={}),this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new ke}e.GraphModel=De,e.deregisterOp=function(e){delete n[e]},e.loadGraphModel=function(a,n){return void 0===n&&(n={}),y(this,void 0,void 0,function(){var t;return U(this,function(e){switch(e.label){case 0:if(null==a)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");return(n=null==n?{}:n).fromTFHub&&null==a.load&&(a.endsWith("/")||(a+="/"),a+="model.json?tfjs-format=file"),[4,(t=new De(a,n)).load()];case 1:return e.sent(),[2,t]}})})},e.registerOp=function(e,t){n[e]={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t}},e.version_converter="3.7.0",Object.defineProperty(e,"__esModule",{value:!0})});